package com.complaint.backend.utils;

import java.security.Key;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.function.Function;

import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Component;


import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;
import lombok.RequiredArgsConstructor;

@Component
@RequiredArgsConstructor
public class JwtUtil {
    
    
    private Key getSigningkey() {
        byte[] keyBytes = Decoders.BASE64.decode("413F4428472B4B6250655368566D5970337336763979244226452948404D6351") ;
            return Keys.hmacShaKeyFor(keyBytes);
        }

    private String generateToken(Map<String, Object> extraClaims, UserDetails userDetails) {
        extraClaims.put("roles", userDetails.getAuthorities()); // Code Added from ChatGPT
        return Jwts.builder()
                .setClaims(extraClaims)
                .setSubject(userDetails.getUsername())
                .setIssuedAt(new Date(System.currentTimeMillis()))
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24))
                .signWith(getSigningkey(), SignatureAlgorithm.HS256)
                .compact();
        }

    public String generateToken(UserDetails userDetails) {
        return generateToken(new HashMap<>(), userDetails);
        }

        private Claims extarctAllClaims( String token){

            return Jwts.parserBuilder().setSigningKey(getSigningkey()).build().parseClaimsJws(token).getBody();
        }

        private <T> T extractClaims(String token, Function<Claims, T> claimsResolvers ){
            final Claims claims = extarctAllClaims(token);
            return claimsResolvers.apply(claims);
            
        }

        public  String extractUsername(String token){
            return extractClaims(token, Claims::getSubject);
        }

        public boolean isTokenValid(String token, UserDetails userDetails){
            final String username = extractUsername(token);
            // return (username.equals(userDetails.getUsername())) && isTokenExpired(token);
            return username.equals(userDetails.getUsername()) && !isTokenExpired(token); // Generated by ChatGPT

            
        }

        private Date extractExpiration(String token){
            return extractClaims(token, Claims::getExpiration);

        }


        private boolean isTokenExpired(String token){
            return extractExpiration(token).before(new Date());
        }




        } 
    
